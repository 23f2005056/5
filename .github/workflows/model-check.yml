name: Model Sanity Check

on:
  pull_request:
    branches: [main]

permissions:
  pull-requests: write    # Needed for CML to comment on the PR
  contents: read          # Needed for actions/checkout

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 pytest

      - name: Set up GCP credentials, authenticate, and pull data
        run: |
          echo "=== Setting up GCP credentials ==="
          echo "${{ secrets.GCP_CREDENTIALS_JSON }}" > gcp-key.json
          echo "✓ Created gcp-key.json file"
          ls -la gcp-key.json
          echo "File size: $(wc -c < gcp-key.json) bytes"
          
          echo "=== Setting environment variable ==="
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json" >> $GITHUB_ENV
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/gcp-key.json"
          echo "✓ Set GOOGLE_APPLICATION_CREDENTIALS to $(pwd)/gcp-key.json"
          
          echo "=== Installing Google Cloud SDK ==="
          curl https://sdk.cloud.google.com | bash
          export PATH="$HOME/google-cloud-sdk/bin:$PATH"
          echo "✓ Google Cloud SDK installed"
          
          echo "=== Authenticating service account ==="
          gcloud auth activate-service-account --key-file=gcp-key.json
          echo "✓ Service account activated"
          
          echo "=== Setting project ==="
          gcloud config set project mlopsweek1
          echo "✓ Project set to mlopsweek1"
          
          echo "=== Verifying authentication ==="
          gcloud auth list
          gcloud config list
          
          echo "=== Testing Google Cloud Storage access ==="
          gsutil ls gs://week4_mlops_bucket/ || echo "Failed to list bucket contents"
          
          echo "=== Activating virtual environment and running DVC pull ==="
          source .venv/bin/activate
          echo "Current working directory: $(pwd)"
          echo "GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS"
          
          echo "=== DVC configuration ==="
          dvc config core.remote
          dvc remote list
          
          echo "=== Running DVC pull ==="
          dvc pull -v

      - name: Auto-format with Black
        run: |
          source .venv/bin/activate
          black --check --diff src/ tests/ || true
          echo "## Code Formatting (Black)" > report.md
          black --check --diff src/ tests/ >> report.md 2>&1 || echo "Formatting issues found" >> report.md
          echo "" >> report.md

      - name: Lint with Flake8
        run: |
          source .venv/bin/activate
          echo "## Linting Results (Flake8)" >> report.md
          flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503 >> report.md 2>&1 || echo "Linting issues found" >> report.md
          echo "" >> report.md

      - name: Run training
        run: |
          source .venv/bin/activate
          python src/train.py

      - name: Generate model performance metrics
        run: |
          source .venv/bin/activate
          python src/plot_metrics.py
          echo "## Model Performance Metrics" >> report.md
          echo "![Model Metrics](metrics.png)" >> report.md
          echo "" >> report.md

      - name: Run tests and save report
        run: |
          source .venv/bin/activate
          echo "## Test Results" >> report.md
          pytest --tb=short --disable-warnings >> report.md 2>&1 || true
          echo "" >> report.md
          echo "Tests completed on $(date)" >> report.md

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            model.pkl
            metrics.png
            report.md
            *.json
            *.csv

      - name: Setup CML
        uses: iterative/setup-cml@v2

      - name: Comment test results with CML
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source .venv/bin/activate
          cml comment create report.md
